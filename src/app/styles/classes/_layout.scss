$grid-columns: 12;

$grid-breakpoints: (
  sm: 0px,
  m: 600px,
  l: 1024px,
  xl: 1440px
);

$grid-gutter-width: (
  sm: 2rem,
  m: 3rem,
  l: 3rem,
  xl: 4rem
);


// Gets the width of a column at a breakpoint.
//
@function col-width($size) {
  @return $size / $grid-columns * 100%;
}

// Wraps content in a media query if greater than 0px.
//
@mixin media-query($breakpoint) {
  $min-width: map-get($grid-breakpoints, $breakpoint);
  @if ($min-width > 0) {
    @media (min-width: #{$min-width}) {
      @content;
    }
  }
  @else {
    @content;
  }
}

.container {
  margin-left: 2rem;
  margin-right: 2rem;

  @media (min-width: 600px) {
    margin-left: 3rem;
    margin-right: 3rem;
  }

  @media (min-width: 1024px) {
    margin-left: 6rem;
    margin-right: 6rem;
  }
}

.row {
  display: flex;
  flex-wrap: wrap;

  @each $breakpoint in (sm, m, xl) {
    $offset: map-get($grid-gutter-width, $breakpoint) / 2 * -1;
    @include media-query($breakpoint) {
      margin-left: $offset;
      margin-right: $offset;
    }
  }
}

.col {
  flex: 1 0;

  @each $breakpoint in (sm, m, xl) {
    $gutter-margin: map-get($grid-gutter-width, $breakpoint) / 2;
    @include media-query($breakpoint) {
      padding-left: $gutter-margin;
      padding-right: $gutter-margin;
    }
  }
}

// Write the rules for the default, small .col-# class.
// Responsive to adjust gutters. We skip large (l) breakpoint
// because the gutter is the same as medium (m).
//
@for $i from 1 through $grid-columns {
  $width: col-width($i);
  .col-#{$i} {
    flex: 0 0 $width;
    max-width: $width;
  }
}

// Write the rules for the responsive medium (m),
// large (l), and extra large (xl) col-#-# classes.
//
@each $breakpoint in (m, l, xl) {
  @include media-query($breakpoint) {
    @for $i from 1 through $grid-columns {
      $width: col-width($i);
      .col-#{$breakpoint}-#{$i} {
        flex: 0 0 $width;
        max-width: $width;
      }
    }
  }
}
